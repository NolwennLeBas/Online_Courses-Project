import streamlit as st

st.set_page_config(page_title="Prediction Model", page_icon="ðŸ¤”")

st.markdown("# Prediction Model")


import pickle
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.tree import DecisionTreeRegressor

# loading the models
scaler_path='scaling_model.pkl'
scaler=pickle.load(open(scaler_path, 'rb'))

encoder_path='encoding_model.pkl'
encoder=pickle.load(open(encoder_path, 'rb'))

model_path='regression_model.pkl'
model=pickle.load(open(model_path, 'rb'))

# list of acceptable values
valid_subject=['Development', 'Finance & Accounting', 'Music', 'Design', 'Business', 'Sciences',
         'Social Sciences', 'Health', 'Teaching & Academics', 'Language', 'History', 'Architecture',
         'Law', 'Art & Culture', 'Literature']
valid_level=['Beginner Level', 'Intermediate Level', 'Expert Level', 'All Levels']
valid_online_academy=['Udemy', 'edX']

# get input values
subject=st.selectbox("Please choose a course subject: ", valid_subject, key='2')
level=st.selectbox("Please choose a course level: ", valid_level, key='3')
total_length=st.number_input("What is the total length of the course? (in hours) ", key='4')
rating=st.slider("What is the rating of the course? ", 0.0, 5.0, 3.0, 0.1, key='5')
num_ratings=st.number_input("How many ratings are there for the course? ", 0, 300000, 2000, key='6')
price=st.number_input("What is the course price? ", 0.0, 3000.0, 200.0, 0.01, key='7')
past_num_students=st.number_input("How many students are currently enrolled in the course? ", 0, 6000000, 2000, key='8')
online_academy=st.selectbox("Please choose an online_academy: ", valid_online_academy, key='9')

# predicting
if st.button("Predict the number of students in 4 years: "):
    X=pd.DataFrame({'subject':[subject],
                    'level': [level],
                    'total_length': [total_length],
                    'rating': [rating],
                    'num_ratings': [num_ratings],
                    'price': [price],
                    'past_num_students': [past_num_students],
                    'online_academy': [online_academy]
                    })
    numerical=X.select_dtypes(include=np.number)
    categorical=X.select_dtypes(include=object)

    # scaling
    X_scaled_arr=scaler.transform(numerical)
    X_scaled=pd.DataFrame(X_scaled_arr, columns=numerical.columns)
    # encoding
    X_encoded_arr=encoder.transform(categorical).toarray()
    cols = encoder.get_feature_names_out(input_features=categorical.columns)
    X_encoded=pd.DataFrame(X_encoded_arr, columns=cols)
    # concatenating
    X_treated=pd.concat([X_scaled, X_encoded], axis=1)

    predictions=model.predict(X_treated)
    #predictions_r=round(predictions)
    gain_students=predictions-past_num_students
    st.write(f"This model predicts that there will be a total of {predictions} students subscribed to this course in 4 years.")
    st.write(f"Therefore, this course would gain {gain_students} students.")
    if (online_academy=='Udemy'):
        st.write("Udemy takes a 3% cut of the revenue when a student purchases a course using an instructor's coupon or referral link.")
        revenue_1=(price*gain_students)*0.97
        revenue1=str(revenue_1)
        st.write(f"""Then, if all students use those, you would make a maximum revenue of {revenue_1} dollars in 4 years.""")
        st.write("#### HOWEVER")
        revenue_2=(price*gain_students)*0.37
        st.write(f"If the students do not use a coupon or referral link, Udemy takes a 63% cut so you would then make a minimum revenue of {revenue_2} dollars in 4 years.")
    elif (online_academy=='edX'):
        st.write("edX is a platform mainly use by universities to disseminate their courses, you should know that they keep the first $50,000 generated by a course.")
        st.write("When this threshold is passed they keep 50% of the revenue generated.")
        revenue_3=(price*gain_students)*0.5
        st.write(f"Supposing that you passed the threshold, you would make a revenue of {revenue_3} dollars over the course of 4 years.")

    st.write("Worth it or not? I'll let you decide! ðŸ˜‰")
    st.write("FYI: the model's score was 0.68 with a mean absolute error of 12,119. Do consider the predicted number of students with this context in mind.")
